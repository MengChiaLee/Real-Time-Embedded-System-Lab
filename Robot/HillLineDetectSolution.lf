target C {
  platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
  },
  single-threaded: true
}

import Line from "lib/Line.lf"
import Display from "lib/Display.lf"

main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
  line = new Line()
  disp = new Display()
  timer t(0, sample_period)
  timer seconds(0, 1 s)
  timer end_calibration(calibration_time)
  state count: int = 0
  
  reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
      lf_set(disp.line0, "CALIBRATING");
      lf_set(disp.line1, "Roll robot over");
      lf_set(disp.line2, "light and dark.");
  =}
  
  reaction(seconds) -> disp.line3 {=
      static char buf[17];
      snprintf(buf, 17, "time:%8d s", self->count++);
      lf_set(disp.line3, buf);
  =}
  
  reaction(end_calibration) -> line.calibrate {=
      lf_set(line.calibrate, false);
  =}
  
  reaction(t) -> line.trigger {=
      lf_set(line.trigger, true);
  =}
  
  reaction(line.reflect) -> disp.line0, disp.line1, disp.line2 {=
      static char buf0[17] = "";
      static char buf1[17] = "";
      static char buf2[17] = "";
      
      // 清空緩衝區
      buf0[0] = '\0';
      buf1[0] = '\0';
      buf2[0] = '\0';
      
      // 檢查左側感測器 (0和1)
      if (line.reflect->value[0] > 750 || line.reflect->value[1] > 750) {
          snprintf(buf0, 17, "Left");
      }
      
      // 檢查中間感測器 (1,2,3)  // 修正：使用正確的中間感測器組
      if (line.reflect->value[1] > 750 || 
          line.reflect->value[2] > 750 || 
          line.reflect->value[3] > 750) {
          snprintf(buf1, 17, "Center");
      }
      
      // 檢查右側感測器 (3和4)
      if (line.reflect->value[3] > 750 || line.reflect->value[4] > 750) {
          snprintf(buf2, 17, "Right");
      }
      
      // 如果沒有檢測到任何邊緣
      if (buf0[0] == '\0' && buf1[0] == '\0' && buf2[0] == '\0') {
          snprintf(buf0, 17, "No edge detected");
      }
      
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
  =}
}