target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
  }
  
  preamble {=
    #include <stdio.h>
    #include <pico/stdlib.h>
  
    // Base address for the Single-Cycle IO (SIO) block
    #define SIO_BASE 0xD0000000
  
    // Offsets for GPIO output control registers
    #define SIO_GPIO_OUT_SET_OFFSET 0x14
    #define SIO_GPIO_OUT_CLR_OFFSET 0x18
  
    // Macros to access the GPIO SET and CLR registers
    #define SIO_GPIO_OUT_SET *(volatile uint32_t *)(SIO_BASE + SIO_GPIO_OUT_SET_OFFSET)
    #define SIO_GPIO_OUT_CLR *(volatile uint32_t *)(SIO_BASE + SIO_GPIO_OUT_CLR_OFFSET)
  =}
  
  main reactor {
    timer t(0, 250 ms)
    state led_on: bool = false
  
    reaction(startup) {=
      // Initialize the GPIO pin using SDK functions
      gpio_init(PICO_DEFAULT_LED_PIN);
      gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
    =}
  
    reaction(t) {=
      self->led_on = !self->led_on;
      printf("LED State: %d\n", self->led_on);
  
      // Directly control the GPIO pin by writing to memory-mapped registers
      if (self->led_on) {
          SIO_GPIO_OUT_SET = (1u << PICO_DEFAULT_LED_PIN);  // Turn ON the LED
      } else {
          SIO_GPIO_OUT_CLR = (1u << PICO_DEFAULT_LED_PIN);  // Turn OFF the LED
      }
    =}
  }
  