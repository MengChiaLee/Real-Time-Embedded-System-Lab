target C {
    platform: {
        name: "rp2040",
        board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
}

import Display from "lib/Display.lf"
import Motors from "lib/Motors.lf"
import Encoders from "lib/Encoders.lf"

reactor AngleToDistance {
    input angle:int32_t;        // Input angle in degrees
    output distance:float;      // Output distance (in meters)
    
    reaction(angle) -> distance {=
        const double WHEEL_DIAMETER = 0.03175;  // 3.175 cm in meters
        const double PI = 3.14159265359;
        
        // Calculate distance: (angle / 360) * circumference
        double distance_traveled = 
            ((double)angle->value / 360.0) * (PI * WHEEL_DIAMETER);
            
        lf_set(distance, distance_traveled);
    =}
}

reactor Robot {
    input drive: bool
    output notify: string
    
    motors = new Motors()
    
    reaction(startup) -> notify {=
        lf_set(notify, "INIT");
    =}
    
    initial mode STOPPED {
        reaction(drive) -> motors.left_power, motors.right_power, reset(DRIVING), notify {=
            if (drive->value) {
                lf_set(motors.left_power, 0.1f);
                lf_set(motors.right_power, 0.1f);
                lf_set_mode(DRIVING);
                lf_set(notify, "DRIVING");
            }
        =}
        
        reaction(startup) -> motors.left_power, motors.right_power {=
            // Initialize motors to stopped state
            lf_set(motors.left_power, 0.0f);
            lf_set(motors.right_power, 0.0f);
        =}
    }
    mode DRIVING {
        reaction(drive) -> motors.left_power, motors.right_power, reset(STOPPED), notify {=
            if (!drive->value) {
                lf_set(motors.left_power, 0.0f);
                lf_set(motors.right_power, 0.0f);
                lf_set_mode(STOPPED);
                lf_set(notify, "STOPPED");
            }
        =}
        
        reaction(startup) -> motors.left_power, motors.right_power {=
            // Initialize motors to driving state
            lf_set(motors.left_power, 0.1f);
            lf_set(motors.right_power, 0.1f);
        =}
    }
}

main reactor {
    display = new Display()
    encoder = new Encoders()
    left_distance = new AngleToDistance()
    right_distance = new AngleToDistance()
    robot = new Robot()
    
    timer t(0, 1 s)
    state drive: bool = false
    
    reaction(t) -> robot.drive, encoder.trigger {=
        // Toggle drive state and trigger encoder reading
        lf_set(robot.drive, self->drive);
        self->drive = !self->drive;
        lf_set(encoder.trigger, true);
    =}
    
    reaction(startup) -> display.line0 {=
        lf_set(display.line0, "DISTANCE (m):");
    =}
    
    encoder.left -> left_distance.angle
    encoder.right -> right_distance.angle
    
    reaction(left_distance.distance) -> display.line1 {=
        static char buf[17];
        snprintf(buf, 17, "L: %.3f", left_distance.distance->value);
        lf_set(display.line1, buf);
    =}
    
    reaction(right_distance.distance) -> display.line2 {=
        static char buf[17];
        snprintf(buf, 17, "R: %.3f", right_distance.distance->value);
        lf_set(display.line2, buf);
    =}
    
    robot.notify -> display.line3
}
